From a78f7348c9e16997bb6b5abac4da7ee2669fa1ed Mon Sep 17 00:00:00 2001
From: artas182x <artas182x@gmail.com>
Date: Wed, 26 Nov 2014 21:21:00 +0100
Subject: [PATCH] Fix phoning

Change-Id: I75574143d211c04b13a95b4afaa0f16a95082f20
---
 src/com/android/phone/PhoneInterfaceManager.java   | 95 +++++++---------------
 .../services/telephony/TelecomAccountRegistry.java |  7 +-
 .../telephony/TelephonyConnectionService.java      |  9 +-
 3 files changed, 40 insertions(+), 71 deletions(-)

diff --git a/src/com/android/phone/PhoneInterfaceManager.java b/src/com/android/phone/PhoneInterfaceManager.java
index 26e31b0..9c67d04 100644
--- a/src/com/android/phone/PhoneInterfaceManager.java
+++ b/src/com/android/phone/PhoneInterfaceManager.java
@@ -130,11 +130,12 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
     AppOpsManager mAppOps;
     MainThreadHandler mMainThreadHandler;
 
-    SharedPreferences carrierPrivilegeConfigs;
-    private static final String PREF_CARRIERS_ALPHATAG_PREFIX = "carrier_alphtag_";
-    private static final String PREF_CARRIERS_NUMBER_PREFIX = "carrier_number_";
-    private static final String PREF_CARRIERS_SIMPLIFIED_NETWORK_SETTINGS_PREFIX =
-            "carrier_simplified_network_settings_";
+    /**
+     * Indicates if Android should display a simplified Mobile Network Settings UI in a specific
+     * subscription.
+     */
+    Set<Long> mSimplifiedNetworkSettings;
+    Map<Long, AdnRecord> mAdnRecordsForDisplay;
 
     /**
      * A request object to use for transmitting data to an ICC.
@@ -692,10 +693,10 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
         mApp = app;
         mPhone = phone;
         mCM = PhoneGlobals.getInstance().mCM;
+        mSimplifiedNetworkSettings = new HashSet<Long>();
         mAppOps = (AppOpsManager)app.getSystemService(Context.APP_OPS_SERVICE);
         mMainThreadHandler = new MainThreadHandler();
-        carrierPrivilegeConfigs =
-                PreferenceManager.getDefaultSharedPreferences(mPhone.getContext());
+        mAdnRecordsForDisplay = new HashMap<Long, AdnRecord>();
         publish();
     }
 
@@ -1909,94 +1910,56 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
             mPhone.getContext().getPackageManager(), intent);
     }
 
-    private String getIccId(long subId) {
-        UiccCard card = getPhone(subId).getUiccCard();
-        if (card == null) {
-            loge("getIccId: No UICC");
-            return null;
-        }
-        String iccId = card.getIccId();
-        if (TextUtils.isEmpty(iccId)) {
-            loge("getIccId: ICC ID is null or empty.");
-            return null;
-        }
-        return iccId;
-    }
-
     @Override
     public void enableSimplifiedNetworkSettingsForSubscriber(long subId, boolean enable) {
         enforceModifyPermissionOrCarrierPrivilege();
 
-        String iccId = getIccId(subId);
-        if (iccId != null) {
-            String snsPrefKey = PREF_CARRIERS_SIMPLIFIED_NETWORK_SETTINGS_PREFIX + iccId;
-            SharedPreferences.Editor editor = carrierPrivilegeConfigs.edit();
-            if (enable) {
-                editor.putBoolean(snsPrefKey, true);
-            } else {
-                editor.remove(snsPrefKey);
-            }
-            editor.commit();
+       if (enable) {
+            mSimplifiedNetworkSettings.add(subId);
+        } else {
+            mSimplifiedNetworkSettings.remove(subId);
         }
     }
 
     @Override
     public boolean getSimplifiedNetworkSettingsEnabledForSubscriber(long subId) {
         enforceReadPermission();
-        String iccId = getIccId(subId);
-        if (iccId != null) {
-            String snsPrefKey = PREF_CARRIERS_SIMPLIFIED_NETWORK_SETTINGS_PREFIX + iccId;
-            return carrierPrivilegeConfigs.getBoolean(snsPrefKey, false);
-        }
-        return false;
+        return mSimplifiedNetworkSettings.contains(subId);
     }
 
     @Override
     public void setLine1NumberForDisplayForSubscriber(long subId, String alphaTag, String number) {
         enforceModifyPermissionOrCarrierPrivilege();
 
-        String iccId = getIccId(subId);
-        if (iccId != null) {
-            String alphaTagPrefKey = PREF_CARRIERS_ALPHATAG_PREFIX + iccId;
-            SharedPreferences.Editor editor = carrierPrivilegeConfigs.edit();
-            if (alphaTag == null) {
-                editor.remove(alphaTagPrefKey);
-            } else {
-                editor.putString(alphaTagPrefKey, alphaTag);
-            }
-
-            String numberPrefKey = PREF_CARRIERS_NUMBER_PREFIX + iccId;
-            if (number == null) {
-                editor.remove(numberPrefKey);
-            } else {
-                editor.putString(numberPrefKey, number);
-            }
-            editor.commit();
-        }
+       mAdnRecordsForDisplay.put(subId, new AdnRecord(alphaTag, number));
     }
 
     @Override
     public String getLine1NumberForDisplay(long subId) {
         enforceReadPermission();
 
-        String iccId = getIccId(subId);
-        if (iccId != null) {
-            String numberPrefKey = PREF_CARRIERS_NUMBER_PREFIX + iccId;
-            return carrierPrivilegeConfigs.getString(numberPrefKey, null);
+   if (!mAdnRecordsForDisplay.containsKey(subId)) {
+            return null;
+        }
+        AdnRecord adnRecord = mAdnRecordsForDisplay.get(subId);
+        if (adnRecord.getNumber() == null || adnRecord.getNumber().isEmpty()) {
+            return null;
         }
-        return null;
+        return adnRecord.getNumber();
     }
 
     @Override
     public String getLine1AlphaTagForDisplay(long subId) {
         enforceReadPermission();
 
-        String iccId = getIccId(subId);
-        if (iccId != null) {
-            String alphaTagPrefKey = PREF_CARRIERS_ALPHATAG_PREFIX + iccId;
-            return carrierPrivilegeConfigs.getString(alphaTagPrefKey, null);
+        if (!mAdnRecordsForDisplay.containsKey(subId)) {
+            return null;
+        }
+        AdnRecord adnRecord = mAdnRecordsForDisplay.get(subId);
+        if (adnRecord.getAlphaTag() == null || adnRecord.getAlphaTag().isEmpty()) {
+            return null;
         }
-        return null;
+        return adnRecord.getAlphaTag();
     }
 
     @Override
@@ -2036,4 +1999,4 @@ public class PhoneInterfaceManager extends ITelephony.Stub {
 
         return returnValue;
     }
-}
+}
\ No newline at end of file
diff --git a/src/com/android/services/telephony/TelecomAccountRegistry.java b/src/com/android/services/telephony/TelecomAccountRegistry.java
index b337622..cbeb8af 100644
--- a/src/com/android/services/telephony/TelecomAccountRegistry.java
+++ b/src/com/android/services/telephony/TelecomAccountRegistry.java
@@ -69,6 +69,7 @@ final class TelecomAccountRegistry {
         private final PstnIncomingCallNotifier mIncomingCallNotifier;
 
         AccountEntry(Phone phone, boolean isEmergency, boolean isDummy) {
+            isEmergency = false;
             mPhone = phone;
             mAccount = registerPstnPhoneAccount(isEmergency, isDummy);
             Log.d(this, "Registered phoneAccount: %s with handle: %s",
@@ -85,6 +86,7 @@ final class TelecomAccountRegistry {
          */
         private PhoneAccount registerPstnPhoneAccount(boolean isEmergency, boolean isDummyAccount) {
             String dummyPrefix = isDummyAccount ? "Dummy " : "";
+               isEmergency = false;
 
             // Build the Phone account handle.
             PhoneAccountHandle phoneAccountHandle =
@@ -252,11 +254,12 @@ final class TelecomAccountRegistry {
 
     private static PhoneAccountHandle makePstnPhoneAccountHandleWithPrefix(
             Phone phone, String prefix, boolean isEmergency) {
+        isEmergency = false;
         ComponentName pstnConnectionServiceName =
                 new ComponentName(phone.getContext(), TelephonyConnectionService.class);
         // TODO: Should use some sort of special hidden flag to decorate this account as
         // an emergency-only account
-        String id = isEmergency ? "E" : prefix + String.valueOf(phone.getSubId());
+        String id = prefix + String.valueOf(phone.getSubId());
         return new PhoneAccountHandle(pstnConnectionServiceName, id);
     }
 
@@ -339,4 +342,4 @@ final class TelecomAccountRegistry {
         }
         mAccounts.clear();
     }
-}
+}
\ No newline at end of file
diff --git a/src/com/android/services/telephony/TelephonyConnectionService.java b/src/com/android/services/telephony/TelephonyConnectionService.java
index 73a57d3..c713d8c 100644
--- a/src/com/android/services/telephony/TelephonyConnectionService.java
+++ b/src/com/android/services/telephony/TelephonyConnectionService.java
@@ -134,11 +134,14 @@ public class TelephonyConnectionService extends ConnectionService {
 
         int state = phone.getServiceState().getState();
         boolean useEmergencyCallHelper = false;
-
+        boolean ForceCalling = true;
         if (isEmergencyNumber) {
             if (state == ServiceState.STATE_POWER_OFF) {
                 useEmergencyCallHelper = true;
             }
+         else if (ForceCalling) {
+                useEmergencyCallHelper = false;
+           } 
         } else {
             switch (state) {
                 case ServiceState.STATE_IN_SERVICE:
@@ -175,7 +178,7 @@ public class TelephonyConnectionService extends ConnectionService {
         connection.setInitializing();
         connection.setVideoState(request.getVideoState());
 
-        if (useEmergencyCallHelper) {
+        if (isEmergencyNumber) {
             if (mEmergencyCallHelper == null) {
                 mEmergencyCallHelper = new EmergencyCallHelper(this);
             }
@@ -414,4 +417,4 @@ public class TelephonyConnectionService extends ConnectionService {
 
         return true;
     }
-}
+}
\ No newline at end of file
-- 
1.9.1

